#%RAML 1.0
title: kubeAM
version: 1
securitySchemes: 
  basic:
    type: Basic Authentication

/:
  get:
    responses:


/health-check: # optional resourc
  get: # HTTP method declaration
    responses: # declare a response
      200: # HTTP status code
        body: # declare content of response
          application/text: # media type
            type: | # structural definition of a response (schema or type)
              {
                "title": "Hello world Response",
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            example: | # example of how a response looks
              {
                "message": "OK"
              }


/v1/create:
  /{application}/{environment}/{cluster}/{tag}:
    description: Create an application with given tag on given environment and cluster
    post:
      responses: 
        200:
          body: 
            application/json:
              example: |
                {
                  "action": "create",
                  "resourcce": "qbo-qa-c76"
                }
            application/text:
              example: "Application not found"


/v1/provision:
  /self/{environment}/{tag}:
    post:
  /{application}/{environment}/{cluster}/{tag}:
    post:
      description: Creates an ephemeral kubernetes resource
      responses: 
        200:
          body: 
            application/json:
              example: |
                {
                  "action": "create",
                  "resourcce": "qbo-qa-c76"
                }
            application/text:
              example: "Application not found"
    delete:
      description: Delete the kubernetes resource
    get:
      description: Get resource status for all types for resources for the given application
      responses: 
        200:
          body: 
            application/json:
              example: |
                {
                  "resourcce": "qbo-qa-c76-app"
                  "namespace": default
                }
            application/text:
              example: "Application not found"
  /{application}/{environment}/{cluster}/{tag}/{ttl}:
    description: Update the TTL for the resource in the redis caches to increase cluster availability
    patch:


/v1/deploy:
  /{application}/{environment}/{cluster}/{tag}:
    post:
      description: Updates the kubernetes resource for the given parameters


/v1/listclusters:
  description: List available clusters
  /{application}/{environment}:
    get:
      responses: 
        200:
          body: 
            example: ["76", "82", "16"]


/v1/getclusterdetails:
  description: Get Details for a specific cluster
  /{application}/{environment}/{cluster}:
    get:


/v1/getallclusterdetails:
  description: Get details of all clusters
  /{application}/{environment}:
    get:


/v1/waitforready:
  /{application}/{environment}/{cluster}:
    get:


/v1/event:
  /{application}/{environment}/{cluster}/{tag}:
    post:
      description: Parses and saves the event payload to database
      body: 
        application/json:
          example: |
            {
              "event": "create",
              "message": "git checkout complete",
              "timestamp": 12 AM,
              "pipeline: kubeam
            }


/v1/kubejob:
  /{application}/{environment}/{cluster}/{jobname}:
    post:
      description: Creates a kubernetes job object
      body:
        application/json:
          example: |
            {
              "jobcommand": /bin/bash,
              "jobparams": sleep,
            }
      responses:
        200:
          body: 
            application/json:
              example: |
              {
                "action": ,
                "resourcce": ,
                "namespace": ,
              }
    get:
      description: Get execution status of an existsing kubernetes job
      responses: 
        200:
          body: 
            application/json:
              example: |
                {
                  "Jobname": ABC,
                  "JobID": 123124,
                  "Starttime": ,
                  "LastProbeTime": ,
                  "JobStatus": Running,
                  "Logs": ,
                }
    delete:
      description: Delete a kubernetes job
      responses: 
        200:
          body: 
            application/xml:
              example: Job {app}-{env}-c{cluster}-{name} deleted          


/v1/githubhook:
  post:
    description: Parses the payload to checkout the github repository into applications
    body: 
      application/json:
        example: |
          {
            "zen": "Approachable is better than simple.",
            "hook_id": 33892538,
            "hook": {
              "type": "Repository",
              "id": 33892538,
              "name": "web",
              "active": true,
              "events": [
                "*"
              ],
              "config": {
                "content_type": "json",
                "insecure_ssl": "1",
                "secret": "********",
                "url": "https://kubeam.sbg-build.a.intuit.com/v1/githubhook"
              },
              "updated_at": "2018-06-19T17:03:48Z",
              "created_at": "2018-06-19T17:03:48Z",
              "url": "https://api.github.com/repos/samkeet/yamler/hooks/33892538",
              "test_url": "https://api.github.com/repos/samkeet/yamler/hooks/33892538/test",
              "ping_url": "https://api.github.com/repos/samkeet/yamler/hooks/33892538/pings",
              "last_response": {
                "code": null,
                "status": "unused",
                "message": null
              }
            },
            "repository": {
              "id": 137921078,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMzc5MjEwNzg=",
              "name": "yamler",
              "full_name": "samkeet/yamler",
              "owner": {
                "login": "samkeet",
                "id": 25041447,
                "node_id": "MDQ6VXNlcjI1MDQxNDQ3",
                "avatar_url": "https://avatars2.githubusercontent.com/u/25041447?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/samkeet",
                "html_url": "https://github.com/samkeet",
                "followers_url": "https://api.github.com/users/samkeet/followers",
                "following_url": "https://api.github.com/users/samkeet/following{/other_user}",
                "gists_url": "https://api.github.com/users/samkeet/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/samkeet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/samkeet/subscriptions",
                "organizations_url": "https://api.github.com/users/samkeet/orgs",
                "repos_url": "https://api.github.com/users/samkeet/repos",
                "events_url": "https://api.github.com/users/samkeet/events{/privacy}",
                "received_events_url": "https://api.github.com/users/samkeet/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/samkeet/yamler",
              "description": null,
              "fork": false,
              "url": "https://api.github.com/repos/samkeet/yamler",
              "contents_url": "https://api.github.com/repos/samkeet/yamler/contents/{+path}",
              "created_at": "2018-06-19T17:02:33Z",
              "open_issues": 0,
              "watchers": 0,
              "default_branch": "master"
            },
            "sender": {
              "login": "samkeet",
              "id": 25041447,
              "node_id": "MDQ6VXNlcjI1MDQxNDQ3",
              "avatar_url": "https://avatars2.githubusercontent.com/u/25041447?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/samkeet",
              "type": "User",
              "site_admin": false
            }
          }
    responses:
      200:
        body: 
          application/text:
            example: Success
  put:
    description: "Downloads and checks out all repositories stored in database"
    responses: 
      200:
        body:
          application/text:
            example: ["githubrepo_1", "githubrepo_2"]
