sudo: required

language: go

go:
- 1.9.x

# Skip the install step. Don't `go get` dependencies. Only build with the code
# in vendor/
install: true

services:
  - docker

# This moves Kubernetes specific config files.
env:
- CHANGE_MINIKUBE_NONE_USER=true

before_install:
  - sudo apt-get update
  - sudo apt-get install -y curl

install:
  - curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
  - make

before_script:
# Download kubectl, which is a requirement for using minikube.
- curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.9.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
# Download minikube.
- curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.25.2/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
- sudo minikube start --vm-driver=none --kubernetes-version=v1.9.0
# Fix the kubectl context, as it's often stale.
- minikube update-context
# Wait for Kubernetes to be up and ready.
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done

script:
- kubectl cluster-info 
# Bootstrap kubeam
- kubectl --namespace kube-system get pods  
- kubectl config set-context  minikube --namespace default
- kubectl apply -f ci-tests/minikube-resitry.yaml
- sleep 20
- make package
- docker push localhost:5000/kubeam
- sleep 10
- kubectl get pods  
- bash build.sh sample-webapp
- docker build . -f Dockerfile-sample-webapp -t localhost:5000/sample-webapp:001
- rm -r -f ./target
- sed -i s/requested/redeployed/g src/sample-webapp/main.go
- bash build.sh sample-webapp
- docker build . -f Dockerfile-sample-webapp -t localhost:5000/sample-webapp:002
- docker push localhost:5000/kubeam
- kubectl apply -f ci-tests/kubeam-bootstrap.yaml
- kubectl apply -f ci-tests/kubeam-bootstrap-service.yaml
- sleep 10
- kubectl get pods
- kubectl logs rc/kubeam
- kubectl describe ReplicationController/kubeam
- curl -k https://admin:123456@localhost/health-check | grep OK
- curl -k https://admin:123456@127.0.0.1/health-check | grep OK
- curl -k --ciphers RC4 https://admin:123456@127.0.0.1/health-check | grep OK
- docker push localhost:5000/sample-webapp:001
- curl -k -X POST https://admin:123456@127.0.0.1/v1/create/sample-webapp/dev/main/001  | tee test2.log
- sleep 2
- cat test2.log |grep -i "namespace dev-sample-webapp created"
- cat test2.log |grep -i "deployment sample-webapp-deployment created"
- cat test2.log |grep -i "service dev-sample-webapp-service created"
- sleep 10
- kubectl --namespace  dev-sample-webapp get pods
- curl -v http://127.0.0.1:8080/ | tee test-app-1.log
- cat test-app-1.log | grep -i "Hello, you've requested"
- docker push localhost:5000/sample-webapp:002
- curl -k -X POST https://admin:123456@127.0.0.1/v1/deploy/sample-webapp/dev/main/002 | tee test3.log
- sleep 10
- cat test3.log | grep -i "deployment sample-webapp-deployment replaced"
- sleep 10
- kubectl --namespace  dev-sample-webapp get pods
- curl -v http://127.0.0.1:8080/ | tee test-app-2.log
- cat test-app-2.log | grep -i "Hello, you've redeployed"
